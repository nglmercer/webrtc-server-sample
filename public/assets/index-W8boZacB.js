(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))i(o);new MutationObserver(o=>{for(const n of o)if(n.type==="childList")for(const s of n.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&i(s)}).observe(document,{childList:!0,subtree:!0});function t(o){const n={};return o.integrity&&(n.integrity=o.integrity),o.referrerPolicy&&(n.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?n.credentials="include":o.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function i(o){if(o.ep)return;o.ep=!0;const n=t(o);fetch(o.href,n)}})();class u{constructor(){this.connection=null,this.eventListeners=new Map,this.isConnected=!1,this.currentRoomId=null,this.initConnection()}initConnection(){if(typeof RTCMultiConnection>"u"){setTimeout(()=>this.initConnection(),100);return}this.connection=new RTCMultiConnection,this.connection.socketURL="http://localhost:9001/",this.connection.socketMessageEvent="video-broadcast-demo",this.connection.session={audio:!0,video:!0,oneway:!0},this.connection.iceServers=[{urls:["stun:stun.l.google.com:19302","stun:stun1.l.google.com:19302","stun:stun2.l.google.com:19302"]}],this.setupConnectionEvents()}setupConnectionEvents(){this.connection.onstream=e=>{console.log("Stream received:",e.type,e.userid),e.type==="local"?this.emit("localStream",e.stream,e.userid):this.emit("remoteStream",e.stream,e.userid)},this.connection.onstreamended=e=>{console.log("Stream ended:",e.userid),this.emit("streamEnded",e.userid)},this.connection.onopen=e=>{console.log("Room opened:",e.roomid),this.emit("roomOpened",e.roomid)},this.connection.onMediaError=e=>{console.error("Media error:",e),this.emit("error",e)},this.connection.onerror=e=>{console.error("Connection error:",e),this.emit("error",e)}}on(e,t){this.eventListeners.has(e)||this.eventListeners.set(e,[]),this.eventListeners.get(e).push(t)}emit(e,...t){this.eventListeners.has(e)&&this.eventListeners.get(e).forEach(i=>{i(...t)})}async openRoom(e){if(!this.connection)throw new Error("Connection not initialized");try{return this.currentRoomId=e,this.connection.sdpConstraints.mandatory={OfferToReceiveAudio:!1,OfferToReceiveVideo:!1},this.connection.open(e,(t,i,o)=>{if(o){this.emit("error",o);return}t&&(this.isConnected=!0,this.emit("roomOpened",i))}),!0}catch(t){return this.emit("error",t),!1}}async joinRoom(e){if(!this.connection)throw new Error("Connection not initialized");try{return this.currentRoomId=e,this.connection.sdpConstraints.mandatory={OfferToReceiveAudio:!0,OfferToReceiveVideo:!0},this.connection.join(e,(t,i,o)=>{if(o){this.emit("error",o);return}t&&(this.isConnected=!0,this.emit("roomJoined",i))}),!0}catch(t){return this.emit("error",t),!1}}leaveRoom(){this.connection&&this.isConnected&&(this.connection.leave(),this.connection.closeSocket(),this.isConnected=!1,this.currentRoomId=null,this.emit("streamEnded","all"),console.log("Left room"))}getStatus(){return{isConnected:this.isConnected,roomId:this.currentRoomId,isInitiator:this.connection?this.connection.isInitiator:!1}}}class h{constructor(e,t){this.rtc=e,this.videoManager=t,this.elements={}}init(){this.bindElements(),this.setupEventListeners(),this.updateConnectionStatus("Disconnected",!1)}bindElements(){this.elements={roomId:document.getElementById("room-id"),openRoom:document.getElementById("open-room"),joinRoom:document.getElementById("join-room"),leaveRoom:document.getElementById("leave-room"),connectionStatus:document.getElementById("connection-status"),roomInfo:document.getElementById("room-info"),statusText:document.getElementById("status-text")}}setupEventListeners(){this.elements.openRoom.addEventListener("click",()=>{this.handleOpenRoom()}),this.elements.joinRoom.addEventListener("click",()=>{this.handleJoinRoom()}),this.elements.leaveRoom.addEventListener("click",()=>{this.handleLeaveRoom()}),this.elements.roomId.addEventListener("keypress",e=>{e.key==="Enter"&&this.handleOpenRoom()}),this.rtc.on("roomOpened",e=>{this.updateConnectionStatus("Connected (Broadcasting)",!0),this.elements.roomInfo.textContent=`Room: ${e} (Host)`}),this.rtc.on("roomJoined",e=>{this.updateConnectionStatus("Connected (Viewing)",!0),this.elements.roomInfo.textContent=`Room: ${e} (Viewer)`}),this.rtc.on("error",e=>{this.setButtonsDisabled(!1),this.updateStatus(`Error: ${e.message||e}`)})}async handleOpenRoom(){const e=this.elements.roomId.value.trim();if(!e){alert("Please enter a valid room ID");return}this.setButtonsDisabled(!0),this.updateStatus("Creating room...");try{await this.rtc.openRoom(e)||(this.setButtonsDisabled(!1),this.updateStatus("Failed to create room"))}catch(t){this.setButtonsDisabled(!1),this.updateStatus(`Error: ${t.message}`)}}async handleJoinRoom(){const e=this.elements.roomId.value.trim();if(!e){alert("Please enter a valid room ID");return}this.setButtonsDisabled(!0),this.updateStatus("Joining room...");try{await this.rtc.joinRoom(e)||(this.setButtonsDisabled(!1),this.updateStatus("Failed to join room"))}catch(t){this.setButtonsDisabled(!1),this.updateStatus(`Error: ${t.message}`)}}handleLeaveRoom(){this.rtc.leaveRoom(),this.videoManager.clearAllVideos(),this.updateConnectionStatus("Disconnected",!1),this.elements.roomInfo.textContent="",this.setButtonsDisabled(!1),this.updateStatus("Disconnected from room")}setButtonsDisabled(e){this.elements.openRoom.disabled=e,this.elements.joinRoom.disabled=e,this.elements.roomId.disabled=e,this.elements.leaveRoom.disabled=!e}updateConnectionStatus(e,t){this.elements.connectionStatus.textContent=e,this.elements.connectionStatus.className=t?"connected":"disconnected"}updateStatus(e){this.elements.statusText.textContent=e,console.log("UI Status:",e)}}class m{constructor(){this.videosContainer=document.getElementById("videos-container"),this.videos=new Map}addLocalVideo(e,t){this.addVideo(e,t,`Your video (${t})`,!0)}addRemoteVideo(e,t){this.addVideo(e,t,`Participant: ${t}`,!1)}addVideo(e,t,i,o=!1){this.removeVideo(t);const n=document.createElement("div");n.className="video-container",n.id=`video-${t}`,o&&n.classList.add("local-video");const s=document.createElement("video");s.autoplay=!0,s.playsInline=!0,s.muted=o,s.controls=!1;try{s.srcObject=e}catch{console.warn("srcObject not supported, using URL.createObjectURL"),s.src=URL.createObjectURL(e)}const a=document.createElement("div");a.className="video-label",a.textContent=i,n.appendChild(s),n.appendChild(a),this.videosContainer.appendChild(n),this.videos.set(t,{container:n,video:s,stream:e,isLocal:o}),s.play().catch(c=>{console.warn("Error playing video:",c),setTimeout(()=>{s.play().catch(l=>console.warn("Second play attempt failed:",l))},1e3)}),console.log(`Video added: ${t} - ${i}`)}removeVideo(e){if(e==="all"){this.videos.forEach((i,o)=>{this.removeVideo(o)});return}const t=this.videos.get(e);t&&(t.isLocal&&t.stream&&t.stream.getTracks().forEach(i=>i.stop()),t.video.srcObject?t.video.srcObject=null:t.video.src&&(URL.revokeObjectURL(t.video.src),t.video.src=""),t.container.remove(),this.videos.delete(e),console.log(`Video removed: ${e}`))}clearAllVideos(){this.removeVideo("all"),console.log("All videos cleared")}getVideoCount(){return this.videos.size}hasVideo(e){return this.videos.has(e)}getVideo(e){const t=this.videos.get(e);return t?t.video:null}toggleMute(e){const t=this.videos.get(e);return t&&!t.isLocal?(t.video.muted=!t.video.muted,t.video.muted):null}}class p{constructor(){this.rtcManager=new u,this.videoManager=new m,this.ui=new h(this.rtcManager,this.videoManager),this.init()}init(){console.log("Initializing RTCMultiConnection app..."),this.ui.init(),this.setupEventListeners(),this.updateStatus("Application ready")}setupEventListeners(){this.rtcManager.on("localStream",(e,t)=>{this.videoManager.addLocalVideo(e,t),this.updateStatus("Local video started")}),this.rtcManager.on("remoteStream",(e,t)=>{this.videoManager.addRemoteVideo(e,t),this.updateStatus(`Remote participant joined: ${t}`)}),this.rtcManager.on("streamEnded",e=>{this.videoManager.removeVideo(e),this.updateStatus(`Participant left: ${e}`)}),this.rtcManager.on("roomOpened",e=>{this.updateStatus(`Room created: ${e}`)}),this.rtcManager.on("roomJoined",e=>{this.updateStatus(`Joined room: ${e}`)}),this.rtcManager.on("error",e=>{console.error("RTC Error:",e),this.updateStatus(`Error: ${e.message||e}`)})}updateStatus(e){const t=document.getElementById("status-text");t&&(t.textContent=e),console.log("Status:",e)}}function d(){typeof RTCMultiConnection<"u"?new p:setTimeout(d,100)}document.addEventListener("DOMContentLoaded",d);
