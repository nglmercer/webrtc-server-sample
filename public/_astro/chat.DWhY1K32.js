import{w as U,v as B}from"./runtime-dom.esm-bundler.Bjkkp3gh.js";import{c as t,s as p,r as S,a as E}from"./store.BXkA121N.js";import{_ as G,u as M,a as R,S as k}from"./_plugin-vue_export-helper.CrT3GEYz.js";import{r as K,s as b,t as r,u as f,v as y,F as O,x as T,C as F,y as _,z as N,A as j,D as A,B as w,E as P}from"./runtime-core.esm-bundler.B9PerW2Z.js";class ${peerConnections={};dataChannels={};callbacks;iceServers={iceServers:[{urls:"stun:stun.l.google.com:19302"}]};constructor(n){this.callbacks=n}getPeerConnection(n){if(!this.peerConnections[n]){const o=new RTCPeerConnection(this.iceServers);o.onicecandidate=e=>{e.candidate&&this.callbacks.onSignalNeeded(n,{candidate:e.candidate.toJSON()})},o.onconnectionstatechange=()=>{this.callbacks.onConnectionStateChange(n,o.connectionState)},o.ondatachannel=e=>{console.log(`Data channel '${e.channel.label}' recibido de ${n}`),this.setupDataChannel(n,e.channel)},this.peerConnections[n]=o}return this.peerConnections[n]}setupDataChannel(n,o){this.dataChannels[n]=o,o.onopen=()=>console.log(`Data channel con ${n} abierto.`),o.onclose=()=>console.log(`Data channel con ${n} cerrado.`),o.onmessage=e=>{this.callbacks.onDataChannelMessage(n,e.data)}}async createOffer(n){const o=this.getPeerConnection(n),e=o.createDataChannel("chat");this.setupDataChannel(n,e);const l=await o.createOffer();await o.setLocalDescription(l),this.callbacks.onSignalNeeded(n,l)}async handleOffer(n,o){const e=this.getPeerConnection(n);await e.setRemoteDescription(new RTCSessionDescription(o));const l=await e.createAnswer();await e.setLocalDescription(l),this.callbacks.onSignalNeeded(n,l)}async handleAnswer(n,o){const e=this.peerConnections[n];e&&await e.setRemoteDescription(new RTCSessionDescription(o))}async addIceCandidate(n,o){const e=this.peerConnections[n];e&&e.remoteDescription&&await e.addIceCandidate(new RTCIceCandidate(o))}broadcastMessage(n){Object.values(this.dataChannels).forEach(o=>{o.readyState==="open"&&o.send(n)})}closeConnection(n){this.peerConnections[n]?.close(),delete this.peerConnections[n],delete this.dataChannels[n]}closeAllConnections(){Object.keys(this.peerConnections).forEach(n=>this.closeConnection(n))}}const L=K({__name:"chat",setup(x,{expose:n}){n();const o=new URLSearchParams(window.location.search),e=o.get("userId"),l=o.get("roomId");(!e||!l)&&console.error("DEBUG: userId o roomId no proporcionados en la URL. Redirigiendo...");const C=M(t),c=_(""),m=_(null);let d,u;N(()=>{console.log(`%c[DEBUG] Componente montado. Iniciando chat para userId: ${e} en roomId: ${l}`,"color: cyan; font-weight: bold;"),t.setKey("roomId",l),t.setKey("myId",e),t.setKey("status","Inicializando..."),t.setKey("peers",{}),t.setKey("messages",[]),d=new $({onSignalNeeded:(a,s)=>{console.log(`%c[DEBUG] WebRTCManager -> onSignalNeeded para ${a}. Enviando señal...`,"color: orange;"),console.log({signal:s}),u.sendSignal(a,s)},onDataChannelMessage:(a,s)=>{console.log(`[DEBUG] WebRTCManager -> onDataChannelMessage de ${a}:`,s);try{const i=JSON.parse(s);E({...i,timestamp:Date.now()})}catch(i){console.error("[DEBUG] Error al parsear mensaje JSON:",i)}},onConnectionStateChange:(a,s)=>{console.info(`%c[DEBUG] WebRTCManager -> onConnectionStateChange para ${a}: ${s}`,"color: lightblue;"),s==="connected"?(p(a,{status:"connected"}),t.setKey("status",`Conectado a ${a}.`)):["disconnected","failed","closed"].includes(s)&&C.value.peers[a]?.status!=="disconnected"&&(console.warn(`[DEBUG] Conexión con ${a} perdida. Estado: ${s}. Limpiando...`),t.setKey("status",`Conexión con ${a} perdida.`),d.closeConnection(a),S(a))}});const h=R.getFullUrl();console.log(`[DEBUG] Creando SignalingChannel para conectar a: ${h}`),u=new k(h,{userId:e,roomId:l},{onConnect:()=>{console.log("%c[DEBUG] Signaling -> onConnect: ¡Conectado al servidor de señalización!","color: green; font-weight: bold;"),t.setKey("isConnected",!0),t.setKey("status","Conectado. Verificando sala..."),console.log("[DEBUG] Signaling: Enviando 'check-presence' al servidor."),u.checkPresence(a=>{console.log(`[DEBUG] Signaling: Respuesta de 'check-presence'. La sala existe: ${a}`);const s=!a;t.setKey("isInitiator",s),console.log(`[DEBUG] Signaling: Soy el iniciador: ${s}. Intentando unirse/crear sala.`),u.openOrJoinRoom(s,i=>{if(console.log("[DEBUG] Signaling: Respuesta de 'open-or-join-room':",i),i){const g=s?"Sala creada. Esperando a otros...":"Unido a la sala. Anunciando presencia...";t.setKey("status",g),s||(console.log("[DEBUG] Signaling: No soy iniciador, enviando 'new-participation-request'."),u.sendNewParticipationRequest(l))}else{const g="Error al unirse:";console.error(`[DEBUG] Signaling: ${g}`,i),t.setKey("status",g)}})})},onDisconnect:()=>{console.error("[DEBUG] Signaling -> onDisconnect: ¡Desconectado del servidor de señalización!"),t.setKey("isConnected",!1),t.setKey("status","Desconectado del servidor. Intenta recargar."),d.closeAllConnections()},onMessage:async({extra:a,message:s})=>{const i=s.sender;if(console.log(`%c[DEBUG] Signaling -> onMessage: Mensaje recibido de ${i}`,"color: yellow;"),console.log({message:s}),s.newParticipationRequest)console.info(`[DEBUG] Manejando 'newParticipationRequest' de ${i}. Creando oferta WebRTC...`),t.setKey("status",`Conectando con ${i}...`),p(i,{status:"negotiating"}),await d.createOffer(i);else if(s.isWebRTCSignal){console.info(`[DEBUG] Manejando 'isWebRTCSignal' de ${i}.`,s);const{signal:g}=s;g.type==="offer"?(console.log("[DEBUG] ...es una oferta (offer). Creando respuesta..."),p(i,{status:"negotiating"}),await d.handleOffer(i,g)):g.type==="answer"?(console.log("[DEBUG] ...es una respuesta (answer). Estableciendo conexión..."),await d.handleAnswer(i,g)):g.candidate?(console.log("[DEBUG] ...es un candidato ICE. Añadiendo..."),await d.addIceCandidate(i,g.candidate)):console.warn("[DEBUG] Señal WebRTC desconocida:",g)}},onUserDisconnected:a=>{C.value.peers[a]&&(console.warn(`[DEBUG] Signaling -> onUserDisconnected: Usuario ${a} se ha desconectado.`),t.setKey("status",`Usuario ${a} se fue.`),d.closeConnection(a),S(a))},onRoomOwnerChanged:a=>{console.info(`[DEBUG] Signaling -> onRoomOwnerChanged: El nuevo dueño es ${a}`);const s=a===e;t.setKey("isInitiator",s),s&&t.setKey("status","¡Ahora eres el dueño de la sala!")}}),console.log("[DEBUG] Llamando a signaling.connect()..."),u.connect()}),j(()=>{console.warn("[DEBUG] Componente desmontado. Cerrando todas las conexiones."),d.closeAllConnections(),u&&u.disconnect()});function v(){if(!c.value.trim()||Object.keys(C.value.peers).length===0)return;const h={senderId:e,senderName:e,text:c.value.trim()},a=JSON.stringify(h);E({...h,timestamp:Date.now()}),d.broadcastMessage(a),c.value=""}A(()=>C.value.messages,async()=>{await P(),m.value&&(m.value.scrollTop=m.value.scrollHeight)},{deep:!0});const D={params:o,userId:e,roomId:l,state:C,newMessage:c,messagesContainer:m,get webrtc(){return d},set webrtc(h){d=h},get signaling(){return u},set signaling(h){u=h},sendMessage:v};return Object.defineProperty(D,"__isScriptSetup",{enumerable:!1,value:!0}),D}}),W={class:"flex flex-col h-screen max-w-4xl mx-auto p-4"},z={class:"p-4 border-b border-gray-700"},I={class:"text-xl font-bold"},J={class:"text-sm text-gray-400"},q={class:"text-xs text-gray-500 mt-2"},V={ref:"messagesContainer",class:"flex-grow p-4 overflow-y-auto space-y-4 bg-gray-800/50 rounded-md my-4"},H={class:"font-bold text-sm"},Q={class:"text-white break-words"},X={class:"text-xs text-gray-400 text-right mt-1"},Y={class:"p-4 border-t border-gray-700"},Z=["disabled"],ee=["disabled"];function ne(x,n,o,e,l,C){return w(),b("div",W,[r("header",z,[r("h1",I,"Sala: "+f(e.state.roomId),1),r("p",J,"Tu Nombre: "+f(e.state.myId),1),r("p",{class:y(["text-sm",e.state.isConnected?"text-green-400":"text-yellow-400"])},f(e.state.status),3),r("div",q," Conectado con: "+f(Object.keys(e.state.peers).filter(c=>e.state.peers[c]?.status==="connected").length)+" usuario(s) ",1)]),r("div",V,[(w(!0),b(O,null,T(e.state.messages,(c,m)=>(w(),b("div",{key:m,class:y(["flex",c.senderId===e.state.myId?"justify-end":"justify-start"])},[r("div",{class:y(["max-w-xs lg:max-w-md p-3 rounded-lg",c.senderId===e.state.myId?"bg-blue-600":"bg-gray-700"])},[r("p",H,f(c.senderId===e.state.myId?"Tú":c.senderName),1),r("p",Q,f(c.text),1),r("p",X,f(new Date(c.timestamp).toLocaleTimeString()),1)],2)],2))),128))],512),r("footer",Y,[r("form",{onSubmit:U(e.sendMessage,["prevent"]),class:"flex items-center space-x-2"},[F(r("input",{"onUpdate:modelValue":n[0]||(n[0]=c=>e.newMessage=c),type:"text",placeholder:"Escribe un mensaje...",disabled:!e.state.isConnected,class:"flex-grow px-3 py-2 text-white bg-gray-700 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50"},null,8,Z),[[B,e.newMessage]]),r("button",{type:"submit",disabled:!e.state.isConnected||Object.keys(e.state.peers).length===0,class:"px-4 py-2 font-bold text-white bg-blue-600 rounded-md hover:bg-blue-700 disabled:bg-gray-500 disabled:cursor-not-allowed"}," Enviar ",8,ee)],32)])])}const ie=G(L,[["render",ne]]);export{ie as default};
