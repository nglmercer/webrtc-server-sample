import{S as c,a as i}from"./apiConfig.Bhn8rpQL.js";import{e}from"./Emitter.7_0WgsaW.js";const t=new c(i.getFullUrl());let a=!1;t.connect();t.on("connect",()=>{console.log("Conectado al servidor WebSocket"),a=!0,e.emit("connectionStatus",!0),s()});t.on("disconnect",()=>{console.log("Desconectado del servidor WebSocket"),a=!1,e.emit("connectionStatus",!1)});t.on("error",o=>{console.error("Error de WebSocket:",o),e.emit("roomsError","Error de conexión con el servidor")});e.on("requestRooms",()=>{s()});e.on("requestReconnect",()=>{m()});function s(){if(!a){e.emit("roomsError","No hay conexión disponible");return}try{t.emit("GetRooms",o=>{try{const n=l(o);e.emit("rooms",n),console.log("Salas obtenidas:",{rooms:o,roomList:n})}catch(n){console.error("Error al procesar salas:",n),e.emit("roomsError","Error al procesar las salas")}})}catch(o){console.error("Error al solicitar salas:",o),e.emit("roomsError","Error al solicitar las salas")}}const l=o=>Object.entries(o).map(([n,r])=>({name:r.extra.name||n,owner:r.owner,participantCount:r.participants.length,maxParticipants:r.maxParticipantsAllowed,createdAt:r.createdAt,canJoin:r.participants.length<r.maxParticipantsAllowed}));function m(){console.log("Intentando reconectar..."),a&&t.disconnect(),setTimeout(()=>{t.connect()},1e3)}
