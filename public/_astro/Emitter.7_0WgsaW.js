class o{listeners;anyListeners;maxListeners;constructor(){this.listeners=new Map,this.anyListeners=[],this.maxListeners=100}on(e,s){this.listeners.has(e)||this.listeners.set(e,[]);const t=this.listeners.get(e);t.length>=this.maxListeners&&console.warn(`MaxListenersExceededWarning: Possible EventEmitter memory leak detected. ${t.length+1} listeners added for event "${e}". Use setMaxListeners() to increase limit.`);const i=Symbol("listener");return t.push({id:i,callback:s,once:!1}),()=>{const n=this.listeners.get(e);if(n){const l=n.filter(r=>r.id!==i);l.length===0?this.listeners.delete(e):this.listeners.set(e,l)}}}once(e,s){this.listeners.has(e)||this.listeners.set(e,[]);const t=this.listeners.get(e),i=Symbol("once-listener");return t.push({id:i,callback:s,once:!0}),()=>{const n=this.listeners.get(e);if(n){const l=n.filter(r=>r.id!==i);l.length===0?this.listeners.delete(e):this.listeners.set(e,l)}}}onAny(e){const s=n=>{e(n.event,...n.args)},t=Symbol("any-listener"),i={id:t,callback:s,originalCallback:e,once:!1};return this.anyListeners.push(i),()=>{this.anyListeners=this.anyListeners.filter(n=>n.id!==t)}}onceAny(e){const s=n=>{e(n.event,...n.args)},t=Symbol("once-any-listener"),i={id:t,callback:s,originalCallback:e,once:!0};return this.anyListeners.push(i),()=>{this.anyListeners=this.anyListeners.filter(n=>n.id!==t)}}emit(e,...s){let t=!1;const i=this.listeners.get(e);if(i&&i.length>0){t=!0;const n=[...i],l=[];if(n.forEach(r=>{try{r.callback(...s),r.once&&l.push(r.id)}catch(h){console.error(`Error in listener for event "${e}":`,h),r.once&&l.push(r.id)}}),l.length>0){const r=i.filter(h=>!l.includes(h.id));r.length===0?this.listeners.delete(e):this.listeners.set(e,r)}}if(this.anyListeners.length>0){t=!0;const n=[...this.anyListeners],l=[];n.forEach(r=>{try{r.callback({event:e,args:s}),r.once&&l.push(r.id)}catch(h){console.error(`Error in "any" listener for event "${e}":`,h),r.once&&l.push(r.id)}}),l.length>0&&(this.anyListeners=this.anyListeners.filter(r=>!l.includes(r.id)))}return t}off(e,s){const t=this.listeners.get(e);if(t){const i=t.filter(n=>n.callback!==s);i.length===0?this.listeners.delete(e):this.listeners.set(e,i)}}removeAllListeners(e){e?this.listeners.delete(e):(this.listeners.clear(),this.anyListeners=[])}listenerCount(e){const s=this.listeners.get(e);return s?s.length:0}eventNames(){return Array.from(this.listeners.keys())}setMaxListeners(e){this.maxListeners=e}getMaxListeners(){return this.maxListeners}getListeners(e){const s=this.listeners.get(e);return s?s.map(t=>t.callback):[]}getAnyListeners(){return this.anyListeners.map(e=>e.originalCallback)}prependListener(e,s){this.listeners.has(e)||this.listeners.set(e,[]);const t=this.listeners.get(e),i=Symbol("prepend-listener");return t.unshift({id:i,callback:s,once:!1}),()=>{const n=this.listeners.get(e);if(n){const l=n.filter(r=>r.id!==i);l.length===0?this.listeners.delete(e):this.listeners.set(e,l)}}}prependOnceListener(e,s){this.listeners.has(e)||this.listeners.set(e,[]);const t=this.listeners.get(e),i=Symbol("prepend-once-listener");return t.unshift({id:i,callback:s,once:!0}),()=>{const n=this.listeners.get(e);if(n){const l=n.filter(r=>r.id!==i);l.length===0?this.listeners.delete(e):this.listeners.set(e,l)}}}async emitAsync(e,...s){return new Promise(t=>{setTimeout(()=>{const i=this.emit(e,...s);t(i)},0)})}debug(){const e={};let s=0;return this.listeners.forEach((t,i)=>{e[i]=t.length,s+=t.length}),{totalEvents:this.listeners.size,totalListeners:s,anyListeners:this.anyListeners.length,events:e,memoryInfo:{listenersMap:this.listeners.size,anyListenersArray:this.anyListeners.length}}}destroy(){this.listeners.clear(),this.anyListeners=[]}hasListeners(e){const s=this.listeners.get(e);return s&&s.length>0||this.anyListeners.length>0}}const a=new o;export{a as e};
