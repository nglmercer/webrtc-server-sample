import{w as G,v as M}from"./runtime-dom.esm-bundler.V4q6XpJS.js";import{c as n,a as C,b as S,d as v}from"./store.vYH4AoEF.js";import{B as R,u as F,a as K,b as T}from"./index.BPknQVyX.js";import{a as k}from"./apiConfig.Bhn8rpQL.js";import{_ as I}from"./_plugin-vue_export-helper.DlAUqK2U.js";import{d as P,c as h,a as i,t as m,n as w,F as j,i as N,G as O,r as U,o as $,f as W,H as A,g as D,I as L}from"./runtime-core.esm-bundler.cWTXz6wy.js";class z extends R{constructor(r){super(r)}setupPeerConnection(r,g){console.log(`[DataWebRTC] Configurando conexión de datos para ${r}`)}sendChatMessage(r,g){r==="broadcast"?this.broadcastMessage(g):this.sendMessageToPeer(r,g)}sendPrivateMessage(r,g){this.sendMessageToPeer(r,JSON.stringify({type:"private",message:g,timestamp:Date.now()}))}}const J=P({__name:"chat",setup(E,{expose:r}){r();const g=new URLSearchParams(window.location.search),s=g.get("userId"),f=g.get("roomId");(!s||!f)&&console.error("DEBUG: userId o roomId no proporcionados en la URL. Redirigiendo...");const p=F(n),t=U(""),b=U(null);let l,d;$(()=>{console.log(`%c[DEBUG] Componente montado. Iniciando chat para userId: ${s} en roomId: ${f}`,"color: cyan; font-weight: bold;"),n.setKey("roomId",f),n.setKey("myId",s),n.setKey("status","Inicializando..."),n.setKey("peers",{}),n.setKey("messages",[]);const u={onSignalNeeded:(e,o)=>{console.log(`%c[DEBUG] DataWebRTC -> onSignalNeeded para ${e}. Enviando señal...`,"color: orange;"),console.log({signal:o}),d.sendSignal(e,o)},onDataChannelMessage:(e,o)=>{console.log(`[DEBUG] DataWebRTC -> onDataChannelMessage de ${e}:`,o);try{const a=JSON.parse(o);v({...a,timestamp:Date.now()})}catch(a){console.error("[DEBUG] Error al parsear mensaje JSON:",a)}},onConnectionStateChange:(e,o)=>{console.info(`%c[DEBUG] DataWebRTC -> onConnectionStateChange para ${e}: ${o}`,"color: lightblue;"),o==="connected"?(C(e,{status:"connected"}),n.setKey("status",`Conectado a ${e}.`)):["disconnected","failed","closed"].includes(o)&&p.value.peers[e]?.status!=="disconnected"&&(console.warn(`[DEBUG] Conexión con ${e} perdida. Estado: ${o}. Limpiando...`),n.setKey("status",`Conexión con ${e} perdida.`),l.closeConnection(e),S(e))},onPrivateMessage:(e,o,a)=>{console.log(`[DEBUG] Mensaje privado de ${e} para ${o}: ${a}`)}};l=new z(u);const x=k.getFullUrl();console.log(`[DEBUG] Creando SignalingChannel para conectar a: ${x}`),K(x),d=T({userId:s,roomId:f},{onConnect:()=>{console.log("%c[DEBUG] Signaling -> onConnect: ¡Conectado al servidor de señalización!","color: green; font-weight: bold;"),n.setKey("isConnected",!0),n.setKey("status","Conectado. Verificando sala..."),console.log("[DEBUG] Signaling: Enviando 'check-presence' al servidor."),d.checkPresence(e=>{console.log(`[DEBUG] Signaling: Respuesta de 'check-presence'. La sala existe: ${e}`);const o=!e;n.setKey("isInitiator",o),console.log(`[DEBUG] Signaling: Soy el iniciador: ${o}. Intentando unirse/crear sala.`),d.openOrJoinRoom(o,a=>{if(console.log("[DEBUG] Signaling: Respuesta de 'open-or-join-room':",a),a){const c=o?"Sala creada. Esperando a otros...":"Unido a la sala. Anunciando presencia...";n.setKey("status",c),o||(console.log("[DEBUG] Signaling: No soy iniciador, enviando 'new-participation-request'."),d.sendNewParticipationRequest(f))}else{const c="Error al unirse:";console.error(`[DEBUG] Signaling: ${c}`,a),n.setKey("status",c)}})})},onDisconnect:()=>{console.error("[DEBUG] Signaling -> onDisconnect: ¡Desconectado del servidor de señalización!"),n.setKey("isConnected",!1),n.setKey("status","Desconectado del servidor. Intenta recargar."),l.closeAllConnections()},onMessage:async({extra:e,message:o})=>{const a=o.sender;if(console.log(`%c[DEBUG] Signaling -> onMessage: Mensaje recibido de ${a}`,"color: yellow;"),console.log({message:o}),o.newParticipationRequest)console.info(`[DEBUG] Manejando 'newParticipationRequest' de ${a}. Creando oferta WebRTC...`),n.setKey("status",`Conectando con ${a}...`),C(a,{status:"negotiating"}),await l.createOffer(a);else if(o.isWebRTCSignal){console.info(`[DEBUG] Manejando 'isWebRTCSignal' de ${a}.`,o);const{signal:c}=o;c.type==="offer"?(console.log("[DEBUG] ...es una oferta (offer). Creando respuesta..."),C(a,{status:"negotiating"}),await l.handleOffer(a,c)):c.type==="answer"?(console.log("[DEBUG] ...es una respuesta (answer). Estableciendo conexión..."),await l.handleAnswer(a,c)):c.candidate?(console.log("[DEBUG] ...es un candidato ICE. Añadiendo..."),await l.addIceCandidate(a,c.candidate)):console.warn("[DEBUG] Señal WebRTC desconocida:",c)}},onUserDisconnected:e=>{p.value.peers[e]&&(console.warn(`[DEBUG] Signaling -> onUserDisconnected: Usuario ${e} se ha desconectado.`),n.setKey("status",`Usuario ${e} se fue.`),l.closeConnection(e),S(e))},onRoomOwnerChanged:e=>{console.info(`[DEBUG] Signaling -> onRoomOwnerChanged: El nuevo dueño es ${e}`);const o=e===s;n.setKey("isInitiator",o),o&&n.setKey("status","¡Ahora eres el dueño de la sala!")}}),console.log("[DEBUG] Llamando a signaling.connect()..."),d.connect();const{socket:y}=d;y&&y?.on("connect",()=>{console.log("[DEBUG] Signaling: Conectado al servidor de señalización."),y?.emit("rooms",e=>{console.log("[DEBUG] Signaling: Rooms:",e)})})}),W(()=>{console.warn("[DEBUG] Componente desmontado. Cerrando todas las conexiones."),l.closeAllConnections(),d&&d.disconnect()});function B(){if(!t.value.trim()||Object.keys(p.value.peers).length===0)return;const u={senderId:s,senderName:s,text:t.value.trim()},x=JSON.stringify(u);v({...u,timestamp:Date.now()}),l.sendChatMessage("broadcast",x),t.value=""}A(()=>p.value.messages,async()=>{await L(),b.value&&(b.value.scrollTop=b.value.scrollHeight)},{deep:!0});const _={params:g,userId:s,roomId:f,state:p,newMessage:t,messagesContainer:b,get webrtc(){return l},set webrtc(u){l=u},get signaling(){return d},set signaling(u){d=u},sendMessage:B};return Object.defineProperty(_,"__isScriptSetup",{enumerable:!1,value:!0}),_}}),q={class:"flex flex-col h-screen max-w-4xl mx-auto p-4"},V={class:"p-4 border-b border-gray-700"},H={class:"text-xl font-bold"},Q={class:"text-sm text-gray-400"},X={class:"text-xs text-gray-500 mt-2"},Y={ref:"messagesContainer",class:"flex-grow p-4 overflow-y-auto space-y-4 bg-gray-800/50 rounded-md my-4"},Z={class:"font-bold text-sm"},ee={class:"text-white break-words"},oe={class:"text-xs text-gray-400 text-right mt-1"},se={class:"p-4 border-t border-gray-700"},ae=["disabled"],ne=["disabled"];function te(E,r,g,s,f,p){return D(),h("div",q,[i("header",V,[i("h1",H,"Sala: "+m(s.state.roomId),1),i("p",Q,"Tu Nombre: "+m(s.state.myId),1),i("p",{class:w(["text-sm",s.state.isConnected?"text-green-400":"text-yellow-400"])},m(s.state.status),3),i("div",X," Conectado con: "+m(Object.keys(s.state.peers).filter(t=>s.state.peers[t]?.status==="connected").length)+" usuario(s) ",1)]),i("div",Y,[(D(!0),h(j,null,N(s.state.messages,(t,b)=>(D(),h("div",{key:b,class:w(["flex",t.senderId===s.state.myId?"justify-end":"justify-start"])},[i("div",{class:w(["max-w-xs lg:max-w-md p-3 rounded-lg",t.senderId===s.state.myId?"bg-blue-600":"bg-gray-700"])},[i("p",Z,m(t.senderId===s.state.myId?"Tú":t.senderName),1),i("p",ee,m(t.text),1),i("p",oe,m(new Date(t.timestamp).toLocaleTimeString()),1)],2)],2))),128))],512),i("footer",se,[i("form",{onSubmit:G(s.sendMessage,["prevent"]),class:"flex items-center space-x-2"},[O(i("input",{"onUpdate:modelValue":r[0]||(r[0]=t=>s.newMessage=t),type:"text",placeholder:"Escribe un mensaje...",disabled:!s.state.isConnected,class:"flex-grow px-3 py-2 text-white bg-gray-700 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50"},null,8,ae),[[M,s.newMessage]]),i("button",{type:"submit",disabled:!s.state.isConnected||Object.keys(s.state.peers).length===0,class:"px-4 py-2 font-bold text-white bg-blue-600 rounded-md hover:bg-blue-700 disabled:bg-gray-500 disabled:cursor-not-allowed"}," Enviar ",8,ne)],32)])])}const fe=I(J,[["render",te]]);export{fe as default};
